# VRCMeow Configuration Example
# Copy this file to config.yaml and modify it according to your needs.

# --- Dashscope Settings ---
# 强烈建议通过 DASHSCOPE_API_KEY 环境变量设置 API 密钥。
# 如果在此处设置，它将被使用，但环境变量优先。
dashscope:
  api_key: "" # 必需：在此处设置 API 密钥或通过 DASHSCOPE_API_KEY 环境变量设置

  # --- 语音转文本 (STT) 设置 ---
  stt:
    # 翻译的目标语言（例如 "en", "ja", "ko"）。
    # 如果在此处提供语言代码，将启用翻译功能。
    # 留空或删除此行以禁用翻译。
    # 确保所选的 Dashscope 模型（例如 gummy）支持此目标语言。
    translation_target_language: "" # 留空表示禁用翻译
    # 用于实时 STT/翻译的 Dashscope 模型名称
    # 查看 Dashscope 文档以了解可用的模型及其功能。
    # "gummy-realtime-v1" 支持翻译。
    # "paraformer-realtime-v2", "paraformer-realtime-v1" 仅支持转录。
    model: "gummy-realtime-v1"
    # 如何处理中间（非最终）STT 结果：
    # "ignore": (默认) 不处理中间结果。
    # "show_typing": 向 VRChat 发送固定的 "Typing..." 消息。
    # "show_partial": 向 VRChat 发送不完整的识别文本。
    intermediate_result_behavior: "ignore"

# --- Audio Settings ---
audio:
  # 音频采样率 (Hz)。
  # 留空 (null) 以尝试使用默认输入设备的采样率。
  # 如果检测失败或取消注释此行，则回退到 16000 Hz。
  # 确保采样率与所选 STT 模型兼容（例如 Dashscope Gummy 需要 16000）。
  sample_rate: null # 默认为 null (自动检测)
  # 通道数 (Dashscope gummy-realtime-v1 需要 1)
  channels: 1
  # 音频数据类型 (Dashscope gummy-realtime-v1 需要 'int16')
  dtype: "int16"
  # 启用调试回声模式（将麦克风输入直接发送到扬声器输出）
  # 用于在没有 STT/OSC 的情况下测试麦克风输入。
  debug_echo_mode: false

# --- Large Language Model (LLM) Processing Settings ---
llm:
  # 设置为 true 以启用使用 LLM 处理最终 STT 结果。
  enabled: false
  # OpenAI 兼容服务的 API 密钥。
  # 强烈建议通过 OPENAI_API_KEY 环境变量设置。
  api_key: "" # 必需：在此处设置 API 密钥或通过 OPENAI_API_KEY 环境变量设置
  # 可选：API 端点的基础 URL。
  # 对于本地 LLM（例如，具有 'openai' 兼容性的 Ollama: "http://localhost:11434/v1"）
  # 或 API 代理很有用。如果未设置或为 null，则默认为 OpenAI 的官方 API URL。
  # 示例： base_url: "https://onehub.const.icu/v1"
  base_url: null
  # 用于处理的模型名称（例如 "gpt-3.5-turbo", "gpt-4", 或本地模型名称）。
  # 示例： model: "gemini-2.0-flash-exp"
  model: "gpt-3.5-turbo" # 根据需要更改
  # 系统提示指示 LLM 如何处理输入。
  # 此值直接用作提示文本。以下是一个风格转换的示例。
  system_prompt: |
    你是一名高精度文本风格转换器，负责将用户提供的文字改写为'日本轻小说女主角'风格。请严格遵循以下规则：
    
    1. 给每一句话加上喵~

    【思考过程】
    步骤1: 理解原文的语义和情感基调
    步骤2: 识别适合添加轻小说女主角特征的位置
    步骤3: 选择合适的语气词、自称和表情符号进行添加
    步骤4: 调整语句结构确保自然流畅
    步骤5: 检查确保语义保持不变且风格一致
    【最终输出】
    只输出转换后的文本，不包含任何思考过程或说明。
  # 控制输出的随机性。较低的值（例如 0.2）使其更具确定性，较高的值（例如 1.0）使其更随机。
  temperature: 0.7
  # LLM 在其响应中应生成的最大 token 数（大致为单词/音节）。
  max_tokens: 256
  # Few-shot 示例为 LLM 提供特定的输入/输出对以指导其响应。
  # 这是一个字典列表，每个字典包含一个 'user' 提示和所需的 'assistant' 响应。
  few_shot_examples:
    - user: "你好"
      assistant: "你好喵~"
    - user: "今天天气怎么样"
      assistant: "今天天气怎么样喵~"

# --- Output Destination Settings ---
outputs:
  # --- VRChat OSC Output ---
  vrc_osc:
    # Set to true to send final (potentially LLM-processed) text to VRChat via OSC.
    # 设置为 true 以将最终（可能经过 LLM 处理的）文本通过 OSC 发送到 VRChat。
    enabled: true
    # VRChat 客户端的 IP 地址（通常是本地机器的 127.0.0.1）
    address: "127.0.0.1"
    # VRChat OSC 输入端口（默认为 9000）
    port: 9000
    # Minimum interval between sending chatbox messages (seconds).
    # Avoid setting too low (e.g., < 1.333) to prevent VRChat rate limiting or chatbox spam.
    # 发送聊天框消息之间的最小间隔（秒）。
    # 避免设置得太低（例如 < 1.333）以防止 VRChat 速率限制或聊天框垃圾信息。
    message_interval: 1.333
    # 发送到 VRChat 聊天框输入的消息的格式字符串。
    # {text} 将被替换为最终识别/处理的文本。
    # 示例: "{text}", ">> {text}", "Meow: {text}", "\t{text}\t"
    format: "\t{text}\t" # 示例格式（前后带制表符）

  # --- 控制台输出 ---
  console:
    # 设置为 true 以将最终（可能经过 LLM 处理的）文本打印到运行 VRCMeow 的控制台。
    enabled: false # 默认为 false
    # 添加到控制台输出行的可选前缀。
    prefix: "[Final Text]"

  # --- 文件输出 ---
  file:
    # 设置为 true 以将最终（可能经过 LLM 处理的）文本附加到文件中。
    enabled: false
    # 将附加结果的文件路径。
    path: "output_log.txt"
    # 写入文件的每行的格式字符串。
    # 可用占位符： {timestamp}, {text}
    # 示例: "{timestamp} | {text}"
    format: "{timestamp} - {text}"

  # --- Add other output destinations here ---
  # Example (Hypothetical):
  # websocket:
  #   enabled: false
  #   url: "ws://localhost:8080/chat"

# --- 日志设置 ---
logging:
  # 日志级别决定了控制台输出的详细程度。
  # 选项： DEBUG, INFO, WARNING, ERROR, CRITICAL
  level: "INFO"
  # --- 应用程序日志文件设置 ---
  file:
    # 设置为 true 以将应用程序的详细运行日志（DEBUG、INFO、ERROR 等）写入文件。
    # 这与 outputs.file 不同，后者用于记录最终的识别/处理结果。
    enabled: true
    # 指定保存应用程序运行日志的文件路径。
    path: "vrcmeow_app.log"
